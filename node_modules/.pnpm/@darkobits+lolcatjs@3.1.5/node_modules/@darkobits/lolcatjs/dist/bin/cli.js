#!/usr/bin/env node
"use strict";

var _saffron = _interopRequireDefault(require("@darkobits/saffron"));

var _pEachSeries = _interopRequireDefault(require("p-each-series"));

var _makinUrText = _interopRequireDefault(require("../lib/makin-ur-text"));

var _constantz = require("../etc/constantz");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_saffron.default.command({
  command: '* <FILEZ..>',
  description: '',
  builder: ({
    command
  }) => {
    command.positional('FILEZ', {
      description: 'Ur filez n ur streamz.',
      type: 'string',
      array: true,
      required: true
    });
    command.option('force', {
      type: 'boolean',
      description: 'Force color even when stdout is not a TTY.',
      alias: 'f'
    });
    command.option('spread', {
      description: 'Rainbow spread.',
      alias: 'p',
      default: _constantz.TEH_DEFAULT_OPSHUNZ.spread
    });
    command.option('freq', {
      description: 'Rainbow frequency.',
      alias: 'F',
      default: _constantz.TEH_DEFAULT_OPSHUNZ.freq
    });
    command.option('seed', {
      description: 'Rainbow seed; 0 = random.',
      alias: 'S',
      default: _constantz.TEH_DEFAULT_OPSHUNZ.seed
    });
    command.option('animate', {
      description: 'Enable psychedelics.',
      type: 'boolean',
      alias: 'a',
      default: _constantz.TEH_DEFAULT_OPSHUNZ.animate
    });
    command.option('speed', {
      description: 'Animation speed.',
      alias: 's',
      default: _constantz.TEH_DEFAULT_OPSHUNZ.speed
    });
    command.option('duration', {
      description: 'Animation duration.',
      alias: 'd',
      default: _constantz.TEH_DEFAULT_OPSHUNZ.duration
    });
    command.usage(['', 'Concatenate FILE(Z) or stndrd inputz to stndrd outputz.', 'Wif no FILE, or when FILE is "-", readz stndrd inputz.'].join('\n'));
    command.example('$0 foo - bar', 'Output foo\'s contents, then stdin, then, bar\'s contents.');
    command.example('$0', 'Copy stdin to stdout.');
    command.example('cowsay "Sindre is a horse" | lolcatjs', 'Because why not.');
  },
  handler: async ({
    argv
  }) => {
    const urLoltext = new _makinUrText.default({ ..._constantz.TEH_DEFAULT_OPSHUNZ,
      ...argv
    });
    urLoltext.stream.pipe(process.stdout);

    if (argv.filez.length === 0) {
      argv.filez.push('-');
    }

    await (0, _pEachSeries.default)(argv.filez, async urArg => {
      return urArg === '-' ? urLoltext.fromStream(process.stdin) : urLoltext.fromFile(urArg);
    });
  }
});

_saffron.default.init(() => (err, argv, output) => {
  if (err) {
    console.error(_makinUrText.default.fromString(err.message ?? err));
    return;
  }

  if (output) {
    console.error(_makinUrText.default.fromString(output));
    return;
  }
});
//# sourceMappingURL=cli.js.map