{"version":3,"sources":["../../src/lib/command.ts"],"names":["camelcaseKeys","loadConfiguration","ow","getPackageInfo","yargs","buildCommand","options","command","optional","string","description","builder","any","undefined","function","handler","strict","boolean","config","false","object","aliases","array","ofType","pkgJson","pkgRoot","showHelpOnFail","wrap","terminalWidth","alias","version","help","packageJson","packageRoot","argv","handlerOpts","deep","autoConfig","auto","configResult","fileName","name","split","slice","configPath","filepath","configIsEmpty","Boolean","isEmpty","Object","entries","forEach","key","value","Reflect","has","set","err","console","error","exitCode","process","exit","code","describe"],"mappings":"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","sourcesContent":["import camelcaseKeys from 'camelcase-keys';\n\nimport {\n  GenericObject,\n  SaffronHandlerOptions,\n  SaffronOptions\n} from 'etc/types';\nimport loadConfiguration from 'lib/configuration';\nimport ow from 'lib/ow';\nimport getPackageInfo from 'lib/package';\nimport yargs from 'lib/yargs';\n\nimport type { Argv, ArgumentsCamelCase } from 'yargs';\n\n\n/**\n * Saffron command builder.\n *\n * Type Parameters:\n *\n * A = Shape of the application's parsed arguments.\n *\n * C = Shape of the application's parsed configuration file, which by default\n *     has the same shape as A.\n */\nexport default function buildCommand<A extends GenericObject = any, C extends GenericObject = A>(options: SaffronOptions<A, C>) {\n  // ----- Validate Options ----------------------------------------------------\n\n  ow(options.command, 'command', ow.optional.string);\n  ow(options.description, 'description', ow.optional.string);\n  ow(options.builder, 'builder', ow.any(ow.undefined, ow.function));\n  ow(options.handler, 'handler', ow.function);\n  ow(options.strict, 'strict', ow.optional.boolean);\n  ow(options.config, 'config', ow.any(ow.boolean.false, ow.object, ow.undefined));\n  ow(options.aliases, 'aliases', ow.any(ow.undefined, ow.string, ow.array.ofType(ow.string)));\n\n\n  // ----- Get Package Info ----------------------------------------------------\n\n  const { pkgJson, pkgRoot } = getPackageInfo();\n\n\n  // ----- Builder Proxy -------------------------------------------------------\n\n  /**\n   * This function wraps the \"builder\" function provided to Yargs, setting\n   * default behaviors and passing any configuration loaded from cosmiconfig.\n   */\n  const builder = (command: Argv<any>): Argv<A> => {\n    // Set strict mode unless otherwise indicated.\n    if (options.strict !== false) {\n      command.strict();\n    }\n\n    // Apply defaults for the command.\n    command.showHelpOnFail(true, 'See --help for usage instructions.');\n    command.wrap(yargs.terminalWidth());\n    command.alias('v', 'version');\n    command.alias('h', 'help');\n\n    if (pkgJson?.version) {\n      command.version(pkgJson.version);\n    }\n\n    command.help();\n\n    // Call user-provided builder, additionally passing the (possible)\n    // configuration file data we loaded.\n    if (options.builder) {\n      options.builder({\n        command,\n        packageJson: pkgJson,\n        packageRoot: pkgRoot\n      });\n    }\n\n    return command;\n  };\n\n\n  // ----- Handler Proxy -------------------------------------------------------\n\n  /**\n   * This function wraps the \"handler\" function provided to Yargs, allowing us\n   * to provide several additional data to command handlers. We also ensure\n   * that process.exit() is called when an (otherwise uncaught) error is thrown,\n   * avoiding UncaughtPromiseRejection errors.\n   */\n  const handler = async (argv: ArgumentsCamelCase<A>) => {\n    const handlerOpts: Partial<SaffronHandlerOptions<A, C>> = {};\n\n    // Convert raw `argv` to camelCase.\n    handlerOpts.argv = camelcaseKeys<any, any>(argv, {deep: true});\n\n    handlerOpts.packageJson = pkgJson;\n    handlerOpts.packageRoot = pkgRoot;\n\n    // Whether we should automatically call command.config() with the data\n    // from the configuration file.\n    let autoConfig = false;\n\n    if (options.config !== false) {\n      // If the user did not disable configuration file loading entirely,\n      // switch autoConfig to `true` unless they explicitly set the `auto`\n      // option to `false`.\n      autoConfig = options.config?.auto !== false;\n\n      const configResult = await loadConfiguration<C>({\n        // By default, use the un-scoped portion of the package's name as the\n        // configuration file name.\n        fileName: pkgJson?.name ? pkgJson.name.split('/').slice(-1)[0] : undefined,\n        // N.B. If the user provided a custom fileName, it will overwrite the\n        // one from package.json above.\n        ...options.config\n      });\n\n      if (configResult) {\n        if (configResult.config) {\n          handlerOpts.config = camelcaseKeys<any, any>(configResult.config, {deep: true});\n        }\n\n        handlerOpts.configPath = configResult.filepath;\n        handlerOpts.configIsEmpty = Boolean(configResult.isEmpty);\n\n        // If `autoConfig` is enabled, for each key in `argv`, set its value to\n        // the corresponding value from `config`, if it exists.\n        if (autoConfig && !handlerOpts.configIsEmpty) {\n          Object.entries(configResult.config).forEach(([key, value]) => {\n            if (handlerOpts.argv && handlerOpts.config && Reflect.has(handlerOpts.argv, key)) {\n              Reflect.set(handlerOpts.argv, key, value);\n            }\n          });\n        }\n      }\n    }\n\n    try {\n      // Finally, invoke the user's handler.\n      await options.handler(handlerOpts as Required<SaffronHandlerOptions<A, C>>);\n    } catch (err: any) {\n      console.error(err);\n\n      if (typeof err?.exitCode === 'number') {\n        process.exit(err.exitCode);\n      } else if (typeof err?.code === 'number') {\n        process.exit(err.code);\n      } else {\n        process.exit(1);\n      }\n    }\n  };\n\n\n  // ----- Register Command ----------------------------------------------------\n\n  yargs.command<A>({\n    command: options.command ?? '*',\n    describe: options?.description ?? pkgJson?.description ?? undefined,\n    aliases: options.aliases,\n    builder,\n    handler\n  });\n}\n"],"file":"command.js"}