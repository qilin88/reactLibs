{"version":3,"sources":["../../src/lib/typescript-loader.ts"],"names":["_TypeScriptLoader","getDefaultExport","value","result","Reflect","has","get"],"mappings":"AAAA,OAAOA,iBAAP;AAcA,OAAO,SAASC,gBAAT,CAA4CC,KAA5C,EAAyD;AAC9D,MAAI;AACF,QAAIC,MAAM,GAAGD,KAAb;;AAEA,WAAOE,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAoB,SAApB,CAAP,EAAuC;AACrCA,MAAAA,MAAM,GAAGC,OAAO,CAACE,GAAR,CAAYH,MAAZ,EAAoB,SAApB,CAAT;AACD;;AAED,WAAOA,MAAP;AACD,GARD,CAQE,MAAM;AACN,WAAOD,KAAP;AACD;AACF;AAGD,eAAeD,gBAAgB,CAACD,iBAAD,CAA/B","sourcesContent":["import _TypeScriptLoader from '@endemolshinegroup/cosmiconfig-typescript-loader';\n\n\n/**\n * This is needed because while we transpile to ESM, we still transpile to CJS\n * for testing in Jest, and certain modules will import different values based\n * on these strategies, so we have to \"find\" the package's true default export\n * at runtime in a way that works in both ESM and CJS.\n *\n * This is essentially a replacement for Babel's _interopRequireDefault helper\n * which is not used / added to transpiled code when transpiling to ESM.\n *\n * TODO: Move to separate package.\n */\nexport function getDefaultExport<T extends object>(value: T): T {\n  try {\n    let result = value;\n\n    while (Reflect.has(result, 'default')) {\n      result = Reflect.get(result, 'default');\n    }\n\n    return result;\n  } catch {\n    return value;\n  }\n}\n\n\nexport default getDefaultExport(_TypeScriptLoader);\n"],"file":"typescript-loader.js"}