{"version":3,"sources":["../../src/lib/init.ts"],"names":["getPackageInfo","yargs","init","cb","pkgJson","showHelpOnFail","wrap","terminalWidth","version","help","Promise","resolve","undefined","then","customParser","parseAsync","process","argv","slice","catch","err","console","error","exit"],"mappings":"AAAA,OAAOA,cAAP;AACA,OAAOC,KAAP;AAQA,eAAe,SAASC,IAAT,CAAcC,EAAd,EAAwC;AACrD,QAAM;AAAEC,IAAAA;AAAF,MAAcJ,cAAc,EAAlC;AAKAC,EAAAA,KAAK,CAACI,cAAN,CAAqB,IAArB,EAA2B,oCAA3B;AACAJ,EAAAA,KAAK,CAACK,IAAN,CAAWL,KAAK,CAACM,aAAN,EAAX;;AAEA,MAAIH,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAEI,OAAb,EAAsB;AACpBP,IAAAA,KAAK,CAACO,OAAN,CAAcJ,OAAO,CAACI,OAAtB;AACD;;AAEDP,EAAAA,KAAK,CAACQ,IAAN;AAIA,OAAKC,OAAO,CAACC,OAAR,CAAgB,OAAOR,EAAP,KAAc,UAAd,GAA2BA,EAAE,CAACF,KAAD,CAA7B,GAAuCW,SAAvD,EAAkEC,IAAlE,CAAuEC,YAAY,IAAI;AAG1F,WAAO,OAAOA,YAAP,KAAwB,UAAxB,GACHb,KAAK,CAACc,UAAN,CAAiBC,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAjB,EAAwCJ,YAAxC,CADG,GAGHb,KAAK,CAACgB,IAHV;AAID,GAPI,EAOFE,KAPE,CAOIC,GAAG,IAAI;AACdC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACAJ,IAAAA,OAAO,CAACO,IAAR,CAAa,CAAb;AACD,GAVI,CAAL;AAWD","sourcesContent":["import getPackageInfo from 'lib/package';\nimport yargs from 'lib/yargs';\n\nimport type { SaffronInitCallback } from 'etc/types';\n\n/**\n * Sets global defaults for Yargs, then calls `yargs.argv`, which initiates the\n * Yargs parser.\n */\nexport default function init(cb?: SaffronInitCallback) {\n  const { pkgJson } = getPackageInfo();\n\n  // For applications with no sub-commands, this ensures we show help properly\n  // when the user calls --help from the root command. This is necessary even\n  // when a default command with these same options has been configured.\n  yargs.showHelpOnFail(true, 'See --help for usage instructions.');\n  yargs.wrap(yargs.terminalWidth());\n\n  if (pkgJson?.version) {\n    yargs.version(pkgJson.version);\n  }\n\n  yargs.help();\n\n  // Finally, call the provided callback, passing it the Yargs object, in the\n  // event the user needs to perform any additional actions prior to parsing.\n  void Promise.resolve(typeof cb === 'function' ? cb(yargs) : undefined).then(customParser => {\n    // If the user returned a custom parsing callback, parse arguments\n    // manually and pass the callback to `parseAsync`.\n    return typeof customParser === 'function'\n      ? yargs.parseAsync(process.argv.slice(2), customParser)\n      // Note: This is a custom getter that acts like a function call.\n      : yargs.argv;\n  }).catch(err => {\n    console.error(err);\n    process.exit(1);\n  });\n}\n"],"file":"init.js"}