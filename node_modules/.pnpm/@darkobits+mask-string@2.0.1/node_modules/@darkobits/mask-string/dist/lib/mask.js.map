{"version":3,"sources":["../../src/lib/mask.ts"],"names":["maskString","pattern","str","maskChar","TypeError","patterns","Array","isArray","output","forEach","curPattern","RegExp","regEx","matchResults","exec","token","slice","index","length"],"mappings":";;;;;;;AAAA;;;;AAae,SAASA,UAAT,CAAoBC,OAApB,EAAuEC,GAAvE,EAAoFC,QAAQ,GAAG,GAA/F,EAAoG;AACjH,MAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAIE,SAAJ,CAAe,yDAAwD,OAAOF,GAAI,IAAlF,CAAN;AACD;;AAGD,QAAMG,QAAQ,GAAGC,KAAK,CAACC,OAAN,CAAcN,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAApD;AAGA,MAAIO,MAAM,GAAGN,GAAb;AAEAG,EAAAA,QAAQ,CAACI,OAAT,CAAiBC,UAAU,IAAI;AAC7B,QAAI,OAAOA,UAAP,KAAsB,QAAtB,IAAkC,EAAEA,UAAU,YAAYC,MAAxB,CAAtC,EAAuE;AACrE,YAAM,IAAIP,SAAJ,CAAe,6DAA4D,OAAOM,UAAW,IAA7F,CAAN;AACD;;AAGD,UAAME,KAAK,GAAG,IAAID,MAAJ,CAAWD,UAAX,CAAd;AAGA,QAAIG,YAAY,GAAGD,KAAK,CAACE,IAAN,CAAWN,MAAX,CAAnB;;AAGA,WAAOK,YAAP,EAAqB;AACnB,YAAM,CAACE,KAAD,IAAUF,YAAhB;AAIAL,MAAAA,MAAM,GAAGA,MAAM,CAACQ,KAAP,CAAa,CAAb,EAAgBH,YAAY,CAACI,KAA7B,IAAsC,sBAAQF,KAAR,EAAeZ,QAAf,CAAtC,GAAiEK,MAAM,CAACQ,KAAP,CAAaH,YAAY,CAACI,KAAb,GAAqBF,KAAK,CAACG,MAAxC,CAA1E;AAGAL,MAAAA,YAAY,GAAGD,KAAK,CAACE,IAAN,CAAWN,MAAX,CAAf;AACD;AACF,GAtBD;AAwBA,SAAOA,MAAP;AACD","sourcesContent":["import maskAll from 'lib/mask-all';\n\n\n/**\n * Provided a pattern or array of patterns, an input string, and an optional\n * mask character, returns a new string modified such that any tokens therein\n * matching one of the provided patterns is replaced by a string of mask\n * characters of the same length.\n *\n * @example\n *\n * mask(/foo/g, 'foo bar') // => '*** bar'\n */\nexport default function maskString(pattern: string | RegExp | Array<string | RegExp>, str: string, maskChar = '*') {\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected second argument to be of type \"string\", got \"${typeof str}\".`);\n  }\n\n  // Array-ify pattern(s).\n  const patterns = Array.isArray(pattern) ? pattern : [pattern];\n\n  // Initialize output string to input string.\n  let output = str;\n\n  patterns.forEach(curPattern => {\n    if (typeof curPattern !== 'string' && !(curPattern instanceof RegExp)) {\n      throw new TypeError(`Expected pattern to be of type \"string\" or \"RegExp\", got \"${typeof curPattern}\".`);\n    }\n\n    // RegExp-ify the current pattern.\n    const regEx = new RegExp(curPattern);\n\n    // Get initial match results.\n    let matchResults = regEx.exec(output);\n\n    // Iterate until match results are exhausted.\n    while (matchResults) {\n      const [token] = matchResults;\n\n      // Replace the matched token with a string of mask characters of the same\n      // length.\n      output = output.slice(0, matchResults.index) + maskAll(token, maskChar) + output.slice(matchResults.index + token.length);\n\n      // Get next set of match results.\n      matchResults = regEx.exec(output);\n    }\n  });\n\n  return output;\n}\n"],"file":"mask.js"}