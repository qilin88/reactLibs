{"version":3,"sources":["../../src/lib/mask-all.ts"],"names":["maskAll","str","maskChar","TypeError","length","Error","split","map","join"],"mappings":";;;;;;;AASe,SAASA,OAAT,CAAiBC,GAAjB,EAA8BC,QAAQ,GAAG,GAAzC,EAA8C;AAC3D,MAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAIE,SAAJ,CAAe,wDAAuD,OAAOF,GAAI,IAAjF,CAAN;AACD;;AAED,MAAI,OAAOC,QAAP,KAAoB,QAAxB,EAAkC;AAChC,UAAM,IAAIC,SAAJ,CAAe,yDAAwD,OAAOD,QAAS,IAAvF,CAAN;AACD;;AAED,MAAIA,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAW,mDAAkDH,QAAQ,CAACE,MAAO,EAA7E,CAAN;AACD;;AAED,SAAOH,GAAG,CAACK,KAAJ,CAAU,EAAV,EAAcC,GAAd,CAAkB,MAAML,QAAxB,EAAkCM,IAAlC,CAAuC,EAAvC,CAAP;AACD","sourcesContent":["/**\n * Provided a mask character and a string, returns a string of mask characters\n * of the same length.\n *\n * @example\n *\n * maskAll('foo') // => '***'\n * maskAll('bar', '#') // => '###'\n */\nexport default function maskAll(str: string, maskChar = '*') {\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected first argument to be of type \"string\", got \"${typeof str}\".`);\n  }\n\n  if (typeof maskChar !== 'string') {\n    throw new TypeError(`Expected second argument to be of type \"string\", got \"${typeof maskChar}\".`);\n  }\n\n  if (maskChar.length !== 1) {\n    throw new Error(`Expected length of second argument to be 1, got ${maskChar.length}`);\n  }\n\n  return str.split('').map(() => maskChar).join('');\n}\n"],"file":"mask-all.js"}