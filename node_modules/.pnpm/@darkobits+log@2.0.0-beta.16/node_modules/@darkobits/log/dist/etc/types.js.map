{"version":3,"sources":["../../src/etc/types.ts"],"names":[],"mappings":";;AAAA","sourcesContent":["import { IS_PREFIX } from 'etc/constants';\n\nimport type { Chalk, Options as ChalkOptions } from 'chalk';\nimport type { ProgressBarOptions, ProgressBar } from 'lib/progress-bar';\nimport type { SpinnerOptions, Spinner } from 'lib/spinner';\nimport type { TimerOptions, Timer } from 'lib/timer';\n\n\n// ----- Misc ------------------------------------------------------------------\n\n/**\n * Any JavaScript primitive type.\n */\nexport type Primitive = string | number | boolean;\n\n\n/**\n * Signature for custom styling functions.\n */\nexport type StyleFunction = (token: string, chalk: Chalk) => string;\n\n\n/**\n * Object representing the configuration for a single log level.\n */\nexport interface LevelDescriptor {\n  /**\n   * Numerical value for the log level. This value situates the log level\n   * relative to other log levels and determines whether messages logged at this\n   * level will be printed or not.\n   */\n  level: number;\n\n  /**\n   * Label that will be printed with each message logged at this level.\n   */\n  label: string;\n\n  /**\n   * Formatter for the above label.\n   */\n  style?: StyleFunction;\n}\n\n\n/**\n * Signature for all logger methods that produce output.\n */\nexport type LogFunction<T = void> = (...args: Array<any>) => T;\n\n\n/**\n * Object returned by the logger's `prefix` method that carries a special flag\n * indicating it is a prefix. This is done so that when logging multi-line\n * messages, we can extract prefixes and ensure they are inserted into each\n * line's lead.\n */\nexport interface Prefix {\n  [IS_PREFIX]: boolean;\n  toString(): string;\n}\n\n\n// ----- Interactivity ---------------------------------------------------------\n\n/**\n * Callback that will be invoked at each configured interval. This function\n * should call one of the logger's log methods once and only once to produce\n * a new output line that will overwrite the line from the previous interval.\n */\nexport type MessageFn = () => any;\n\n\n/**\n * Options object accepted by #beginInteractiveSession\n */\nexport interface BeginInteractiveOptions {\n  message: MessageFn;\n\n  /**\n   * (Optional) Number of milliseconds between intervals.\n   *\n   * Default: 1000 / 30 (30 updates per second)\n   */\n  interval?: number;\n}\n\n\n/**\n * Options object accepted by the function returned by #beginInteractiveSession.\n */\nexport interface EndInteractiveOptions {\n  message: MessageFn;\n}\n\n\n/**\n * Function returned by #beginInteractiveSession.\n */\nexport type EndInteractiveFn = (options?: MessageFn | EndInteractiveOptions) => void;\n\n\n// ----- Logger ----------------------------------------------------------------\n\n/**\n * Options object accepted by LogFactory and #configure.\n */\nexport interface LogOptions {\n  /**\n   * Function that should return a writable stream that the logger will use.\n   *\n   * Default: process.stderr\n   */\n  stream?: NodeJS.WritableStream | false;\n\n  /**\n   * Optional timestamp format. If set to `false`, timestamps will be disabled.\n   * Formatting is done using date-fns#format.\n   *\n   * See: https://date-fns.org/v2.1.0/docs/format\n   */\n  timestamp?: string;\n\n  /**\n   * Optional heading for all messages logged by the logger.\n   */\n  heading?: string;\n\n  /**\n   * Level to log at.\n   *\n   * Default: process.env.LOG_LEVEL || 'info'\n   */\n  level?: string;\n\n  /**\n   * Whether to normalize whitespace in multi-line strings.\n   *\n   * Default: `true`\n   */\n  stripIndent?: boolean;\n\n  /**\n   * Optional style configuration for the logger.\n   */\n  style?: {\n    /**\n     * Formatter for timestamps.\n     */\n    timestamp?: StyleFunction;\n\n    /**\n     * Formatter for headings.\n     */\n    heading?: StyleFunction;\n\n    /**\n     * Formatter for prefixes.\n     */\n    prefix?: StyleFunction;\n  };\n\n  /**\n   * Optional options to configure the logger's Chalk instance.\n   */\n  chalk?: ChalkOptions;\n\n  /**\n   * Optional custom level definitions. These will be merged with the default\n   * log levels.\n   */\n  levels?: {\n    [key: string]: Partial<LevelDescriptor>;\n  };\n}\n\n\n/**\n * Object returned by LogFactory.\n */\nexport interface Logger {\n  /**\n   * Chalk instance for the logger.\n   */\n  chalk: Chalk;\n\n  /**\n   * Merges the provided configuration object with the logger's existing\n   * configuration. This method can be used to add levels, set the current\n   * level, set the current heading, update styles, etc.\n   */\n  configure(newConfig: Partial<LogOptions>): void;\n\n  /**\n   * Returns the LevelDescriptor for the current log level.\n   */\n  getLevel(): LevelDescriptor;\n\n  /**\n   * Returns an object of LevelDescriptors for each level registered with the\n   * logger.\n   */\n  getLevels(): {\n    [key: string]: LevelDescriptor;\n  };\n\n  /**\n   * Returns `true` if a message at the provided log level would be logged based\n   * on the current log level.\n   */\n  isLevelAtLeast(name: string): boolean;\n\n\n  // ----- Utilities -----------------------------------------------------------\n\n  /**\n   * Style the provided string according to the logger's prefix style.\n   */\n  prefix(prefix: Primitive): Prefix;\n\n  /**\n   * Adds a secret to the logger. Any occurrances of matched tokens in messages\n   * will be masked.\n   */\n  addSecret(secret: Primitive | RegExp, maskChar?: string): void;\n\n  /**\n   * Create a pipe that will log anything written to it at the provided log\n   * level.\n   */\n  createPipe(level: string): NodeJS.WritableStream;\n\n  /**\n   * Render a code frame for an error.\n   */\n  codeFrame(err: Error): string;\n\n\n  // ----- Interactivity -------------------------------------------------------\n\n  /**\n   * Begins an interactive line session.\n   */\n  beginInteractive(options: MessageFn | BeginInteractiveOptions): EndInteractiveFn;\n\n  /**\n   * Creates a timer.\n   */\n  createTimer(options?: TimerOptions): Timer;\n\n  /**\n   * Creates a progress bar.\n   */\n  createProgressBar(options: ProgressBarOptions): ProgressBar;\n\n  /**\n   * Creates a spinner.\n   */\n  createSpinner(options?: SpinnerOptions): Spinner;\n\n\n  // ----- Default Log Methods -------------------------------------------------\n\n  /**\n   * Log a message at the 'error' level.\n   */\n  error: LogFunction;\n\n  /**\n   * Log a message at the 'warn' level.\n   */\n  warn: LogFunction;\n\n  /**\n   * Log a message at the 'notice' level.\n   */\n  notice: LogFunction;\n\n  /**\n   * Log a message at the 'http' level.\n   */\n  http: LogFunction;\n\n  /**\n   * Log a message at the 'timing' level.\n   */\n  timing: LogFunction;\n\n  /**\n   * Log a message at the 'info' level.\n   */\n  info: LogFunction;\n\n  /**\n   * Log a message at the 'verbose' level.\n   */\n  verbose: LogFunction;\n\n  /**\n   * Log a message at the 'silly' level.\n   */\n  silly: LogFunction;\n}\n"],"file":"types.js"}