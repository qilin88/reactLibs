"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LogHistoryFactory;

var _os = _interopRequireDefault(require("os"));

var _ansiEscapes = _interopRequireDefault(require("ansi-escapes"));

var _ow = _interopRequireDefault(require("ow"));

var _stripAnsi = _interopRequireDefault(require("strip-ansi"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const streamHistories = new Map();
let interactiveSessionIdCounter = 0;

function LogHistoryFactory(opts) {
  const logHistory = (0, _utils.createOrphanedObject)();
  let interactiveWriteId = false;
  let streamHandle;

  const lastEntryIsCompleteLine = () => {
    if (streamHandle.history.length === 0) {
      return true;
    }

    const lastItemContent = streamHandle.history[streamHandle.history.length - 1].content;
    return (0, _stripAnsi.default)(lastItemContent).endsWith(_os.default.EOL);
  };

  const updateHistory = (interactiveSessionId, lineContent) => {
    if (streamHandle.interactiveSessionIds.length === 0) {
      return;
    }

    const matches = new RegExp(`.*(\\${_os.default.EOL})?`, 'g').exec(lineContent);

    if (!matches) {
      throw new Error('Unexpected Error: Unable to split content into lines.');
    }

    if (matches[matches.length - 1] === '') {
      matches.pop();
    }

    matches.forEach(content => {
      if (lastEntryIsCompleteLine()) {
        streamHandle.history.push({
          interactiveSessionId,
          content
        });
      } else {
        const lastEntry = streamHandle.history.slice(-1)[0];
        lastEntry.content = `${lastEntry.content}${content}`;
      }
    });
  };

  const decorateOutputStream = stream => {
    if (stream === false) {
      return (...args) => {
        const cb = args.pop();
        cb();
        return true;
      };
    }

    const originalWrite = stream.write.bind(stream);

    stream.write = (chunk, cb) => {
      updateHistory(false, Buffer.from(chunk).toString('utf8'));
      return Reflect.apply(originalWrite, stream, [chunk, cb]);
    };

    return originalWrite;
  };

  const getFirstInteractiveIndex = id => {
    return streamHandle.history.findIndex(logLine => {
      if (id === undefined) {
        return logLine.interactiveSessionId !== false;
      }

      return logLine.interactiveSessionId === id;
    });
  };

  logHistory.setStream = newStream => {
    if (!streamHistories.has(newStream)) {
      const originalWrite = decorateOutputStream(newStream);
      streamHistories.set(newStream, {
        originalWrite,
        history: [],
        interactiveSessionIds: []
      });
    }

    streamHandle = streamHistories.get(newStream);
  };

  logHistory.beginInteractiveSession = () => {
    const interactiveSessionId = Symbol(`${++interactiveSessionIdCounter}`);
    streamHandle.interactiveSessionIds.push(interactiveSessionId);
    return interactiveSessionId;
  };

  logHistory.endInteractiveSession = id => {
    (0, _ow.default)(id, 'id', _ow.default.symbol);

    if (!streamHandle.interactiveSessionIds.includes(id)) {
      throw new Error('Unknown interactive session ID.');
    }

    streamHandle.history = streamHandle.history.map(({
      interactiveSessionId,
      content
    }) => ({
      interactiveSessionId: interactiveSessionId === id ? false : interactiveSessionId,
      content
    }));
    streamHandle.interactiveSessionIds = streamHandle.interactiveSessionIds.filter(curId => curId !== id);

    if (streamHandle.interactiveSessionIds.length === 0) {
      streamHandle.history = [];
    }
  };

  logHistory.hasInteractiveSession = id => {
    (0, _ow.default)(id, 'id', _ow.default.symbol);
    return streamHandle.interactiveSessionIds.includes(id);
  };

  logHistory.doInteractiveWrite = (id, cb) => {
    (0, _ow.default)(id, 'id', _ow.default.symbol);
    (0, _ow.default)(cb, 'callback', _ow.default.function);

    if (!streamHandle.interactiveSessionIds.includes(id)) {
      throw new Error('Unknown interactive session ID.');
    }

    if (interactiveWriteId) {
      throw new Error('Only 1 interactive write allowed at a time.');
    }

    interactiveWriteId = id;
    streamHandle.originalWrite(_ansiEscapes.default.cursorHide);
    const firstInteractiveIndex = getFirstInteractiveIndex(id);
    let oldStreamHistory = [];
    let truncatedLines = [];

    if (firstInteractiveIndex !== -1) {
      oldStreamHistory = streamHandle.history;
      truncatedLines = streamHandle.history.slice(firstInteractiveIndex).filter(logLine => logLine.interactiveSessionId !== id);
      streamHandle.history = streamHandle.history.slice(0, firstInteractiveIndex);
      streamHandle.originalWrite(_ansiEscapes.default.cursorUp(oldStreamHistory.length - firstInteractiveIndex));
    }

    cb();

    if (truncatedLines.length > 0) {
      let historicalIndex = firstInteractiveIndex + streamHandle.history.length;

      for (const truncatedLine of truncatedLines) {
        const oldLine = oldStreamHistory[historicalIndex];

        if (!oldLine || oldLine !== truncatedLine) {
          streamHandle.originalWrite(_ansiEscapes.default.eraseLine);
          streamHandle.originalWrite(truncatedLine.content);
        } else {
          streamHandle.originalWrite(_ansiEscapes.default.cursorDown(1));
        }

        streamHandle.history.push(truncatedLine);
        ++historicalIndex;
      }
    }

    interactiveWriteId = false;
    streamHandle.originalWrite(_ansiEscapes.default.cursorShow);
  };

  logHistory.write = content => {
    (0, _ow.default)(content, 'content', _ow.default.string);
    updateHistory(interactiveWriteId, content);

    if (interactiveWriteId) {
      streamHandle.originalWrite(_ansiEscapes.default.eraseLine);
    }

    streamHandle.originalWrite(content);
  };

  logHistory.setStream(opts.stream);
  return logHistory;
}

module.exports = exports.default;
//# sourceMappingURL=history.js.map