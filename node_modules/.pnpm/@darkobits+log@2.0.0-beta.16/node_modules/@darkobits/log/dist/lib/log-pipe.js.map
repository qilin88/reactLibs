{"version":3,"sources":["../../src/lib/log-pipe.ts"],"names":["LogPipe","Writable","constructor","logFn","ow","function","_logFn","_write","chunk","encoding","callback","str","Buffer","from","toString","endsWith","os","EOL","replace","LAST_EOL_PATTERN"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEA;;;;;;AAWe,MAAMA,OAAN,SAAsBC,gBAAtB,CAA+B;AAG5CC,EAAAA,WAAW,CAACC,KAAD,EAAqB;AAC9B;;AAD8B;;AAE9B,qBAAGA,KAAH,EAAU,cAAV,EAA0BC,YAAGC,QAA7B;AACA,SAAKC,MAAL,GAAcH,KAAd;AACD;;AAGDI,EAAAA,MAAM,CAACC,KAAD,EAAgBC,QAAhB,EAAkCC,QAAlC,EAA4E;AAChF,QAAIC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYL,KAAZ,EAAmBM,QAAnB,CAA4B,MAA5B,CAAV;;AAIA,QAAIH,GAAG,KAAK,EAAZ,EAAgB;AACdD,MAAAA,QAAQ;AACR;AACD;;AAKD,QAAI,wBAAUC,GAAV,EAAeI,QAAf,CAAwBC,YAAGC,GAA3B,CAAJ,EAAqC;AACnCN,MAAAA,GAAG,GAAGA,GAAG,CAACO,OAAJ,CAAYC,2BAAZ,EAA8B,EAA9B,CAAN;AACD;;AAED,SAAKb,MAAL,CAAYK,GAAZ;;AACAD,IAAAA,QAAQ;AACT;;AA7B2C","sourcesContent":["import os from 'os';\nimport {Writable} from 'stream';\n\nimport ow from 'ow';\nimport stripAnsi from 'strip-ansi';\n\nimport {LAST_EOL_PATTERN} from 'etc/constants';\nimport {LogFunction} from 'etc/types';\n\n\n/**\n * Implements a writable stream that will log all incoming messages using the\n * provided log function.\n *\n * This is designed to be used when a program spawns a child process, for\n * example, and wants to pipe() its output to the user using the logger.\n */\nexport default class LogPipe extends Writable {\n  private readonly _logFn: LogFunction;\n\n  constructor(logFn: LogFunction) {\n    super();\n    ow(logFn, 'log function', ow.function);\n    this._logFn = logFn;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  _write(chunk: string, encoding: string, callback: (error?: Error | null) => void) {\n    let str = Buffer.from(chunk).toString('utf8');\n\n    // Skip empty strings because they have no effect on output and wind up\n    // confusing the rest of our logging logic.\n    if (str === '') {\n      callback();\n      return;\n    }\n\n    // If, after removing any ANSI escape sequences, the string ends with\n    // an EOL, then remove the last EOL in the string while preserving ANSI\n    // escape sequences.\n    if (stripAnsi(str).endsWith(os.EOL)) {\n      str = str.replace(LAST_EOL_PATTERN, '');\n    }\n\n    this._logFn(str);\n    callback();\n  }\n}\n"],"file":"log-pipe.js"}