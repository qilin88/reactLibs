{"version":3,"sources":["../../src/lib/progress-bar.ts"],"names":["DEFAULT_OPTIONS","format","symbols","head","tail","complete","completeHead","incomplete","width","ProgressBarFactory","userOptions","progressBar","options","ow","string","number","integer","maxLength","getProgress","function","startTime","Date","now","renderBaseProgressBar","progress","completeLen","Math","round","remainingLen","bar","i","renderElapsedTime","elapsedTime","timeFormat","renderRemainingTime","estimatedTotalTime","remainingTime","Infinity","Number","isNaN","renderPercentage","percentComplete","toString","output","includes","replace"],"mappings":"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","sourcesContent":["import merge from 'deepmerge';\nimport ow from 'ow';\nimport prettyMs from 'pretty-ms';\nimport {createOrphanedObject} from 'lib/utils';\n\n\n/**\n * Options object accepted by ProgressBarFactory and #createProgressBar.\n */\nexport interface ProgressBarOptions {\n  /**\n   * Function that will be invoked each time the progress bar renders. This\n   * function should return a number between 0 and 1 indicating how full the bar\n   * should be.\n   */\n  getProgress(): number;\n\n  /**\n   * Optional tokenized string representing the desired format of the progress\n   * bar.\n   *\n   * Allowed tokens are:\n   * - :bar - The progress bar itself.\n   * - :percentage - The percentage of the bar that is complete (ex: 25%)\n   * - :elapsed - Time elapsed since the progress bar's creation.\n   * - :remaining - Estimated time remaining until the progress bar completes.\n   *\n   * Default: ':bar :percentage'\n   */\n  format?: string;\n\n  /**\n   * Optional width of the inner progress bar. That is, all characters between\n   * its head and its tail.\n   *\n   * Default: 12\n   */\n  width?: number;\n\n  /**\n   * Optional format to use when rendering the :elapsed and :remaining tokens.\n   *\n   * See: https://github.com/sindresorhus/pretty-ms/blob/master/index.d.ts#L2-L64\n   */\n  timeFormat?: prettyMs.Options;\n\n  /**\n   * Optional overrides for the characters used when rendering the progress bar.\n   * All symbols must be a single character.\n   */\n  symbols?: {\n    /**\n     * First/leftmost character.\n     *\n     * Default: '['\n     */\n    head?: string;\n\n    /**\n     * Last/rightmost character.\n     *\n     * Default: ']'\n     */\n    tail?: string;\n\n    /**\n     * Character used to represent the completed portion of the progress bar.\n     *\n     * Default: '='\n     */\n    complete?: string;\n\n    /**\n     * Character used to separate the complete and incomplete portions of the\n     * progress bar.\n     *\n     * Default: '>'\n     */\n    completeHead?: string;\n\n    /**\n     * Character used to represent the incomplete portion of the progress bar.\n     *\n     * Default: '-'\n     */\n    incomplete?: string;\n  };\n}\n\n\n/**\n * Object returned by ProgressBarFactory and #createProgressBar.\n */\nexport interface ProgressBar {\n  toString(): string;\n}\n\n\n/**\n * Default progress bar options.\n *\n * These options will render a progress bar that looks like this:\n *\n * [==>---------] 25%\n */\nconst DEFAULT_OPTIONS = {\n  format: ':bar :percentage',\n  symbols: {\n    head: '[',\n    tail: ']',\n    complete: '=',\n    completeHead: '>',\n    incomplete: '-'\n  },\n  width: 12\n};\n\n\n/**\n * Creates a new progress bar using the provided options. The returned value may\n * be used directly in an interpolated string.\n */\nexport default function ProgressBarFactory(userOptions: ProgressBarOptions) {\n  const progressBar = createOrphanedObject<ProgressBar>();\n\n  // Merge and validate options.\n  const options = merge<Required<ProgressBarOptions>>(DEFAULT_OPTIONS, userOptions || {});\n  ow(options.format, 'format', ow.string);\n  ow(options.width, 'width', ow.number.integer);\n  ow(options.symbols.head, 'head', ow.string.maxLength(1));\n  ow(options.symbols.tail, 'head', ow.string.maxLength(1));\n  ow(options.symbols.complete, 'head', ow.string.maxLength(1));\n  ow(options.symbols.completeHead, 'head', ow.string.maxLength(1));\n  ow(options.symbols.incomplete, 'head', ow.string.maxLength(1));\n  ow(options.getProgress, 'getProgress', ow.function);\n\n\n  /**\n   * @private\n   *\n   * Mark the time when the progress bar was created.\n   */\n  const startTime = Date.now();\n\n\n  /**\n   * @private\n   *\n   * Renders the bar component of a progress bar.\n   */\n  const renderBaseProgressBar = (width: number, progress: number) => {\n    const completeLen = Math.round(progress * width);\n    const remainingLen = Math.round((1 - progress) * width);\n\n    let bar = options.symbols.head;\n\n    for (let i = 0; i < completeLen; i++) {\n      bar = i === completeLen - 1 && progress !== 1 ? `${bar}${options.symbols.completeHead}` : `${bar}${options.symbols.complete}`;\n    }\n\n    for (let i = 0; i < remainingLen; i++) {\n      bar = `${bar}${options.symbols.incomplete}`;\n    }\n\n    bar = `${bar}${options.symbols.tail}`;\n\n    return bar;\n  };\n\n\n  /**\n   * @private\n   *\n   * Renders elapsed time.\n   */\n  const renderElapsedTime = () => {\n    const elapsedTime = Date.now() - startTime;\n    return prettyMs(elapsedTime, options.timeFormat);\n  };\n\n\n  /**\n   * @private\n   *\n   * Renders remaining time.\n   */\n  const renderRemainingTime = (progress: number) => {\n    const elapsedTime = Date.now() - startTime;\n    const estimatedTotalTime = elapsedTime / progress;\n    const remainingTime = estimatedTotalTime - elapsedTime;\n\n    if (remainingTime !== Infinity && remainingTime !== -Infinity && !Number.isNaN(remainingTime)) {\n      return prettyMs(remainingTime, options.timeFormat);\n    }\n\n    return '';\n  };\n\n\n  /**\n   * @private\n   *\n   * Renders percentage.\n   */\n  const renderPercentage = (progress: number) => {\n    const percentComplete = Math.round(progress * 100);\n    return `${percentComplete}%`;\n  };\n\n\n  progressBar.toString = () => {\n    let progress = options.getProgress();\n\n    if (progress < 0) {\n      progress = 0;\n    }\n\n    if (progress > 1) {\n      progress = 1;\n    }\n\n    let output = options.format;\n\n    if (output.includes(':bar')) {\n      output = output.replace(':bar', renderBaseProgressBar(options.width, progress));\n    }\n\n    if (output.includes(':elapsed')) {\n      output = output.replace(':elapsed', renderElapsedTime());\n    }\n\n    if (output.includes(':remaining')) {\n      output = output.replace(':remaining', renderRemainingTime(progress));\n    }\n\n    if (output.includes(':percentage')) {\n      output = output.replace(':percentage', renderPercentage(progress));\n    }\n\n    return output;\n  };\n\n\n  return progressBar;\n}\n"],"file":"progress-bar.js"}