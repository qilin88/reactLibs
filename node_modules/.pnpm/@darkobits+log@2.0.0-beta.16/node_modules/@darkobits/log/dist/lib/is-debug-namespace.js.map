{"version":3,"sources":["../../src/lib/is-debug-namespace.ts"],"names":["generateDebugNamespaceRegex","debugEnvVar","splitNamespaces","String","split","includes","isWildcardNamespace","str","test","isDebugNamespacePattern","reduce","patterns","curNamespace","join","RegExp","isDebugNamespaceRegex","isDebugNamespace","testNamespace","env","has"],"mappings":";;;;;;;AAAA;;;;AASA,SAASA,2BAAT,CAAqCC,WAArC,EAAuD;AAErD,QAAMC,eAAe,GAAGC,MAAM,CAACF,WAAD,CAAN,CAAoBG,KAApB,CAA0B,OAA1B,CAAxB;;AAIA,MAAIF,eAAe,CAACG,QAAhB,CAAyB,GAAzB,CAAJ,EAAmC;AACjC,WAAO,KAAP;AACD;;AAED,QAAMC,mBAAmB,GAAIC,GAAD,IAAiB,SAASC,IAAT,CAAcD,GAAd,CAA7C;;AAGA,QAAME,uBAAuB,GAAGP,eAAe,CAACQ,MAAhB,CAAsC,CAACC,QAAD,EAAWC,YAAX,KAA4B;AAGhG,QAAIN,mBAAmB,CAACM,YAAD,CAAvB,EAAuC;AACrC,aAAO,CAAC,GAAGD,QAAJ,EAAe,KAAIC,YAAa,QAAOA,YAAa,OAApD,CAAP;AACD;;AAED,WAAO,CAAC,GAAGD,QAAJ,EAAe,KAAIC,YAAa,IAAhC,CAAP;AACD,GAR+B,EAQ7B,EAR6B,EAQzBC,IARyB,CAQpB,GARoB,CAAhC;AAUA,SAAO,IAAIC,MAAJ,CAAWL,uBAAX,CAAP;AACD;;AAQD,IAAIM,qBAAJ;;AAOe,SAASC,gBAAT,CAA0BC,aAA1B,EAAiD;AAC9D,MAAI,CAACC,aAAIC,GAAJ,CAAQ,OAAR,CAAL,EAAuB;AACrB,WAAO,KAAP;AACD;;AAGD,MAAI,CAACJ,qBAAL,EAA4B;AAC1BA,IAAAA,qBAAqB,GAAGf,2BAA2B,CAAC,kBAAI,OAAJ,CAAD,CAAnD;AACD;;AAED,SAAOe,qBAAqB,CAACP,IAAtB,CAA2BS,aAA3B,CAAP;AACD","sourcesContent":["import env from '@darkobits/env';\n\n\n/**\n * @private\n *\n * Generates a pattern for testing candidate namespaces for debug-ability based\n * on the 'DEBUG` environment variable.\n */\nfunction generateDebugNamespaceRegex(debugEnvVar: any) {\n  // Split on comma or space.\n  const splitNamespaces = String(debugEnvVar).split(/[ ,]/g);\n\n  // If the list of namespaces includes the global wildcard, return a regular\n  // expression that always matches.\n  if (splitNamespaces.includes('*')) {\n    return /.*/g;\n  }\n\n  const isWildcardNamespace = (str: string) => /.*:\\*/g.test(str);\n\n  // Build up a string we will use to construct a regular expression instance.\n  const isDebugNamespacePattern = splitNamespaces.reduce<Array<string>>((patterns, curNamespace) => {\n    // Ex: For namespace expressions like \"foo:*\", enable debugging on\n    // namespaces that are \"foo\" plus any namespaces beginning with \"foo:\".\n    if (isWildcardNamespace(curNamespace)) {\n      return [...patterns, `(^${curNamespace}$)|(^${curNamespace}:.*$)`];\n    }\n\n    return [...patterns, `(^${curNamespace}$)`];\n  }, []).join('|');\n\n  return new RegExp(isDebugNamespacePattern);\n}\n\n\n/**\n * @private\n *\n * Regular expression used to determine if a namespace is being debugged.\n */\nlet isDebugNamespaceRegex: RegExp;\n\n\n/**\n * Provided a candidate namespace, returns `true` if the namespace has been\n * flagged for debugging according to the 'DEBUG' environment variable.\n */\nexport default function isDebugNamespace(testNamespace: string) {\n  if (!env.has('DEBUG')) {\n    return false;\n  }\n\n  // Parse the 'DEBUG' environment variable once, the first time we are called.\n  if (!isDebugNamespaceRegex) {\n    isDebugNamespaceRegex = generateDebugNamespaceRegex(env('DEBUG'));\n  }\n\n  return isDebugNamespaceRegex.test(testNamespace);\n}\n"],"file":"is-debug-namespace.js"}