/// <reference types="node" />
/**
 * Object containing a Symbol that correlates a log line to its interactive
 * session, or `false` if the line was not produced via an interactive session,
 * and the line's content.
 */
export interface LogLine {
    interactiveSessionId: symbol | false;
    content: string;
}
/**
 * Represents the value stored in the streamHandles Map, which is an object
 * containing each stream's original `write` method and an array of LogLines
 * written to it.
 */
export interface StreamHandle {
    originalWrite: (...args: Array<any>) => any;
    history: Array<LogLine>;
    interactiveSessionIds: Array<symbol>;
}
/**
 * Options object accepted by LogHistoryFactory.
 */
export interface LogHistoryOptions {
    stream: NodeJS.WritableStream | false;
}
/**
 * Object returned by LogHistoryFactory.
 */
export interface LogHistory {
    /**
     * Update the stream that the ledger writes to.
     */
    setStream(newStream: NodeJS.WritableStream | false): void;
    /**
     * Begins a new interactive session and returns the Symbol representing the
     * session ID.
     */
    beginInteractiveSession(): symbol;
    /**
     * Ends the LogHistory's interactive session.
     */
    endInteractiveSession(id: symbol): void;
    /**
     * Provided an interactive session ID, returns `true` if the provided
     * interactive session ID matches the LogHistory's interactive session ID.
     */
    hasInteractiveSession(id: symbol): boolean;
    /**
     * For a LogHistory with an interactive session, begins an interactive write.
     */
    doInteractiveWrite(id: symbol, cb: () => void): void;
    /**
     * General purpose write method that consumers of a LogHistory instance should
     * use in lieu of the write method of the output stream used to construct the
     * LogHistory instance.
     */
    write(content: string): void;
}
export default function LogHistoryFactory(opts: LogHistoryOptions): LogHistory;
