"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ProgressBarFactory;

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _ow = _interopRequireDefault(require("ow"));

var _prettyMs = _interopRequireDefault(require("pretty-ms"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_OPTIONS = {
  format: ':bar :percentage',
  symbols: {
    head: '[',
    tail: ']',
    complete: '=',
    completeHead: '>',
    incomplete: '-'
  },
  width: 12
};

function ProgressBarFactory(userOptions) {
  const progressBar = (0, _utils.createOrphanedObject)();
  const options = (0, _deepmerge.default)(DEFAULT_OPTIONS, userOptions || {});
  (0, _ow.default)(options.format, 'format', _ow.default.string);
  (0, _ow.default)(options.width, 'width', _ow.default.number.integer);
  (0, _ow.default)(options.symbols.head, 'head', _ow.default.string.maxLength(1));
  (0, _ow.default)(options.symbols.tail, 'head', _ow.default.string.maxLength(1));
  (0, _ow.default)(options.symbols.complete, 'head', _ow.default.string.maxLength(1));
  (0, _ow.default)(options.symbols.completeHead, 'head', _ow.default.string.maxLength(1));
  (0, _ow.default)(options.symbols.incomplete, 'head', _ow.default.string.maxLength(1));
  (0, _ow.default)(options.getProgress, 'getProgress', _ow.default.function);
  const startTime = Date.now();

  const renderBaseProgressBar = (width, progress) => {
    const completeLen = Math.round(progress * width);
    const remainingLen = Math.round((1 - progress) * width);
    let bar = options.symbols.head;

    for (let i = 0; i < completeLen; i++) {
      bar = i === completeLen - 1 && progress !== 1 ? `${bar}${options.symbols.completeHead}` : `${bar}${options.symbols.complete}`;
    }

    for (let i = 0; i < remainingLen; i++) {
      bar = `${bar}${options.symbols.incomplete}`;
    }

    bar = `${bar}${options.symbols.tail}`;
    return bar;
  };

  const renderElapsedTime = () => {
    const elapsedTime = Date.now() - startTime;
    return (0, _prettyMs.default)(elapsedTime, options.timeFormat);
  };

  const renderRemainingTime = progress => {
    const elapsedTime = Date.now() - startTime;
    const estimatedTotalTime = elapsedTime / progress;
    const remainingTime = estimatedTotalTime - elapsedTime;

    if (remainingTime !== Infinity && remainingTime !== -Infinity && !Number.isNaN(remainingTime)) {
      return (0, _prettyMs.default)(remainingTime, options.timeFormat);
    }

    return '';
  };

  const renderPercentage = progress => {
    const percentComplete = Math.round(progress * 100);
    return `${percentComplete}%`;
  };

  progressBar.toString = () => {
    let progress = options.getProgress();

    if (progress < 0) {
      progress = 0;
    }

    if (progress > 1) {
      progress = 1;
    }

    let output = options.format;

    if (output.includes(':bar')) {
      output = output.replace(':bar', renderBaseProgressBar(options.width, progress));
    }

    if (output.includes(':elapsed')) {
      output = output.replace(':elapsed', renderElapsedTime());
    }

    if (output.includes(':remaining')) {
      output = output.replace(':remaining', renderRemainingTime(progress));
    }

    if (output.includes(':percentage')) {
      output = output.replace(':percentage', renderPercentage(progress));
    }

    return output;
  };

  return progressBar;
}

module.exports = exports.default;
//# sourceMappingURL=progress-bar.js.map